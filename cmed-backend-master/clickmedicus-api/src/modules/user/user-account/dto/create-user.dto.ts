import { Transform, TransformFnParams } from 'class-transformer';
import {
	IsBoolean,
	IsDateString,
	IsDefined,
	IsEmail,
	IsInt,
	IsNotEmpty,
	IsOptional,
	IsPositive,
	IsString,
	Length,
	Max,
	MaxLength,
	Min,
	MinLength
} from 'class-validator';
import { i18nValidationMessage } from 'nestjs-i18n';
import { AccountType } from '@core/constants/enums/accountType.enum';
/**
 * A DTO class for create new user.
 */
export class CreateUserDto {
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@MinLength(2, {
		message: i18nValidationMessage('validation.MIN', { message: 'COOL' })
	})
	@IsString()
	firstName: string;
	/**
	 * Last name of the user.
	 */
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(2, 100)
	@IsString()
	lastName: string;
	/**
	 * Username of the user.
	 */
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(5, 200)
	username: string;
	/**
	 * Email address of the user.
	 */
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@MaxLength(200)
	@IsEmail()
	email: string;
	/**
	 * Password to login into the system.
	 */
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(8, 20)
	password: string;
	/**
	 * Account type
	 */
	@IsDefined()
	@IsNotEmpty()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	accountType: AccountType;
	/**
	 * Postal code.
	 */
	@IsDefined()
	@IsOptional()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(2, 10)
	postalCode: string;

	/**
	 * Date of birth to calculate the age.
	 */
	@IsDefined()
	@IsOptional()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@IsDateString()
	dateOfBirth: string;
	/**
	 * Gender. M = Male, F = Female, O = Other
	 */
	@IsDefined()
	@IsOptional()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(1, 1)
	gender: string;
	/**
	 * Is the user is translator or not?
	 */
	@IsDefined()
	@IsOptional()
	@IsBoolean()
	isTranslator: boolean = false;
	/**
	 * Address of the account.
	 */
	@IsDefined()
	@IsOptional()
	@Transform(({ value }: TransformFnParams) => value?.trim())
	@Length(2, 500)
	address: string;
	/**
	 * Is active user.
	 */
	@IsDefined()
	@IsInt()
	@Min(0)
	@Max(1)
	isActive: number;
	/**
	 * Profile image path.
	 */
	@MaxLength(500)
	@IsOptional()
	profileImage?: string = null;
	/**
	 * User id of a user who created the record.
	 */
	@IsDefined()
	@IsInt()
	@IsPositive()
	createdBy: number;
	/**
	 * Date and time when the record is created.
	 */
	@IsDefined()
	@IsDateString()
	createdDate: Date;
	/**
	 * Is generated by the system.
	 */
	@IsDefined()
	@IsInt()
	@Min(0)
	@Max(1)
	isSystem: number;
	/**
	 * Is confirmed / varified user (email verification).
	 */
	@IsDefined()
	@IsInt()
	@Min(0)
	@Max(1)
	isConfirmed: number;
}
